package fernuni.propra.algorithm;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.algorithm.runtime_information.IRuntimeCandidateSearcher;
import fernuni.propra.algorithm.util.Rectangle;
import fernuni.propra.algorithm.util.RectangleWithTag;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;

/**
 * 
 * A specific provider of an algorithm that can compute a {@link List} of
 * potential {@link Lamp} positions for an instance of {@link IRoom}.
 * <p>
 * The algorithm works as follows:
 * <p>
 * 1.) The original partial rectangles (instances of {@link RectangleWithTag})
 * of the room are constructed for {@link IRoom} according the method described
 * in [1]. This is delegated to {@link OriginalPartialRectanglesFinder}. The set
 * of potential lamp positions is initialized as the returned set.
 * <p>
 * 2.) All pairs of original partial rectangles are intersected. If an overlap
 * is found, the resulting rectangle is added to the set of potential lamp
 * positions and the tags of both original rectangles are added to the tags of
 * the new rectangle
 * <p>
 * 3.) The set of potential lamp positions is reduced by only keeping those lamp
 * positions whose tags are not a subset of the tags of other rectangles in the
 * set
 * <p>
 * 4.) Steps 2.) and 3.) are repeated until the set does not change any more
 * <p>
 * 5.) The potential lamp positions are the centers of the remaining tagged
 * rectangles
 * <p>
 * 6.) {@link Lamp} objects are created at these {@ Point}s and the lamps are
 * tagged with the tags of the corresponding tagged {@link RectangleWithTag},
 * i.e. the tags of all original partial rectangles of the room that contain the
 * {@link Lamp} are saved to the {@Lamp}s tags.
 * <p>
 * 7.) A {@link List} of all such {@link Lamp}s is returned.
 * 
 * <p>
 * Implemented interfaces and super classes: {@link ICandidateSearcher}
 * 
 * <p>
 * <p>
 * [1]: Aufgabenstellung zum Grundpraktikum Programmierung im Sommersemester
 * 2020
 * 
 * 
 * 
 * @author alex
 *
 */
public class CandidateSearcher4 implements ICandidateSearcher {

	public CandidateSearcher4() {
	}

	@Override
	public List<Lamp> searchCandidates(IRoom room, IRuntimeCandidateSearcher runtimeCandidateSearcher)
			throws CandidateSearcherException, InterruptedException {

		List<RectangleWithTag> originalPartialRectangles = null;
		try {
			originalPartialRectangles = AbstractAlgorithmFactory.getAlgorithmFactory()
					.createOriginalPartialRectanglesFinder()
					.findOriginalPartialRectangles(room, runtimeCandidateSearcher);
		} catch (OriginalPartialRectanglesFinderException e) {

		}

		HashSet<RectangleWithTag> reducedOriginalPartialRectangles = reduceRectangles(originalPartialRectangles);

		// write lamp positions > center of reduced rectangles
		List<Lamp> lampCandidates = new LinkedList<Lamp>();
		for (RectangleWithTag rec : reducedOriginalPartialRectangles) {
			Lamp tmpLamp = new Lamp(rec.getCenter().getX(), rec.getCenter().getY());
			for (Integer tag : rec.getCopyOfTags()) {
				tmpLamp.addTag(tag);
			}
			lampCandidates.add(tmpLamp);

		}

		return lampCandidates;
	}

	/**
	 * Reduces an original set of tagged partial rectangles to a set of
	 * non-overlapping partial rectangles that contain all tags of all original
	 * partial rectangles that intersect the final rectangle.
	 * <p>
	 * 
	 * @param originalRectanglesTagged : The original rectangles
	 * @return A set of reduced rectangles as described above.
	 * @throws InterruptedException
	 */
	HashSet<RectangleWithTag> reduceRectangles(List<RectangleWithTag> originalRectanglesTagged)
			throws InterruptedException {
		ArrayList<RectangleWithTag> inPartialRectangles = new ArrayList<RectangleWithTag>(originalRectanglesTagged);
		ArrayList<RectangleWithTag> reducedPartialRectangles = new ArrayList<RectangleWithTag>();
		HashSet<RectangleWithTag> outPartialRectanglesIn = new HashSet<RectangleWithTag>();

		boolean combinationsOccured = true;
		while (combinationsOccured) {
			combinationsOccured = false;
			// can be interrupted from outside
			if (Thread.currentThread().isInterrupted()) {
				throw new InterruptedException("Computation interrupted.");
			}

			for (int i = 0; i < inPartialRectangles.size(); i++) {
				RectangleWithTag recI = inPartialRectangles.get(i);
				for (int j = i + 1; j < inPartialRectangles.size(); j++) {
					RectangleWithTag rIJ = overlapWithAllRecs(recI, j, inPartialRectangles);

					if (!recI.equals(rIJ)) { // combination occurred
						outPartialRectanglesIn.add(rIJ);
						outPartialRectanglesIn.remove(recI);
						combinationsOccured = true;

					} else { // no combination occurred > keep 
						reducedPartialRectangles.add(recI);
					}
				}

			}
			inPartialRectangles = new ArrayList<RectangleWithTag>(outPartialRectanglesIn);
		}

		HashSet<RectangleWithTag> outPartialRectangles = removeSubsetRectangles(inPartialRectangles);
		return outPartialRectangles;
	}

	/**
	 * Further reduce the set of rectangles. A rectangle which has tags that are a subset of the tags of another rectangle can be omitted.
	 * @param inPartialRectangles : the initial set of tagged rectangles.
	 * @return A reduced set of {@link RectangleWithTag}s.
	 */
	private HashSet<RectangleWithTag> removeSubsetRectangles(ArrayList<RectangleWithTag> inPartialRectangles) {
		ArrayList<RectangleWithTag> reducedPartialRectangles;
		reducedPartialRectangles = inPartialRectangles;

		// Further reduce the set of rectangles.
		// A rectangle which has tags that are a subset of the tags of another rectangle can be omitted 
		HashSet<RectangleWithTag> outPartialRectangles = new HashSet<RectangleWithTag>();
		boolean[] keepRec = new boolean[reducedPartialRectangles.size()];
		for (int i = 0; i < keepRec.length; i++) {
			keepRec[i] = true;
		}

		// subset
		ArrayList<RectangleWithTag> recsWithTag = new ArrayList<RectangleWithTag>(reducedPartialRectangles);
		for (int i = 0; i < recsWithTag.size(); i++) {
			RectangleWithTag rI = recsWithTag.get(i);
			for (int j = i + 1; j < recsWithTag.size(); j++) {
				RectangleWithTag rJ = recsWithTag.get(j);
				
				//rJ's tags are a subset of rI's tags
				if (rI.getCopyOfTags().containsAll(rJ.getCopyOfTags())) {
					keepRec[j] = false;
				} else { //rJ's tags are a subset of rJ's tags
					if (rJ.getCopyOfTags().containsAll(rI.getCopyOfTags())) {
						keepRec[i] = false;
					}
				}
			}
		}

		// remove all rectangles that can omitted
		for (int i = 0; i < recsWithTag.size(); i++) {
			if (keepRec[i]) {
				outPartialRectangles.add(recsWithTag.get(i));
			}
		}
		return outPartialRectangles;
	}

	/**
	 * Recursively computes the overlap of rec with all {@link RectangleWithTag} in recs and adds all tags
	 * to the output {@link RectangleWithTag}.
	 * @param rec : An intial {@link RectangleWithTag}.
	 * @param k : an index in rec. All {@link RectangleWithTag} above this index are overlapped with rec.
	 * @param recs : The set of {@link RectangleWithTag}s to be combined with rec.
	 * @return : A {@link RectangleWithTag} that constitutes the overlap of rec with all rectangles ins recs (above in recs)
	 */
	private static RectangleWithTag overlapWithAllRecs(RectangleWithTag rec, int k, ArrayList<RectangleWithTag> recs) {
		if (k < recs.size()) {
			Rectangle overlap = rec.overlap(recs.get(k));
			if (overlap != null) {
				RectangleWithTag outRectangleWithTag = new RectangleWithTag(overlap, rec.getCopyOfTags());
				for (Integer tag : recs.get(k).getCopyOfTags()) {
					outRectangleWithTag.addTag(tag);
				}
				return overlapWithAllRecs(outRectangleWithTag, k + 1, recs);
			} else {
				return overlapWithAllRecs(rec, k + 1, recs);
			}
		} else {
			return rec;
		}

	}

}
