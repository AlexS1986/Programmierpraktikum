package fernuni.propra.algorithm;

import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.internal_data_model.Wall;

/**
 * An abstract class that represent a generic {@link Wall} container for a certain type of {@link Wall}s,
 * where the type of the {@link WallContainerAbstract} must be specified by implementing subclasses.
 * <p>
 * {@link Wall}s in the container are sorted according to total order specified by a {@link Comparator}<{@link Wall}>,
 * where the ordering must be specified by implementing subclasses. The total ordering is done by mapping {@link Wall}s on integer numbers and
 * using the total ordering defined by the ordering in integer numbers.
 * <p>
 * {@link Wall}s can be added if they are of the correct type.
 * <p>
 * The {@link WallContainerAbstract} can also return the nearest ( in the sense of the specified ordering), valid wall, where
 * validity of a {@link Wall} must be specified by implementing subclasses.
 * <p>
 * Implements the template pattern, where templates are given for the two core functionalities, i.e. adding walls
 * and obtaining a nearest wall in some sense. Subclasses must fill in the blanks by implementing the abstract methods.
 * <p>
 * Implementing classes : {@link WallContainerEast}, {@link WallContainerNorth}, {@link WallContainerSouth}, {@link WallContainerWest}
 * <p>
 * @author alex
 *
 */
public abstract class WallContainerAbstract implements Iterable<Wall> {
	
	protected List<Wall> walls; // the walls in this container
	
	/**
	 * Constructor
	 */
	public WallContainerAbstract() {
		walls = new LinkedList<Wall>();
		
	}
	
	/**
	 * A method that allows to add a {@link Wall} of the correct type to the container.
	 * @param wall : the {@link Wall} to be added
	 * @throws WallContainerException : thrown if wall is not of the correct type.
	 */
	public void add(Wall wall) throws WallContainerException{
		if (!isCorrectWallType(wall)) throw new WallContainerException("Wall does not "
				+ "have the correct orientation for this wall container!");
		walls.add(wall);
		walls.sort(getComparator());
	}
	
	/**
	 * A method that allows to search for the next {@link Wall} (in the sense of the total ordering defined
	 * by the implementing subclass). The search can be further specified by defining a range of integers,
	 * whose meaning also needs to be specified by the implementing subclasses and the clients. 
	 * @param low : lower limit of the range 
	 * @param high : upper limit of the range
	 * @param limit : 
	 * @return
	 * @throws WallContainerException
	 */
	public Wall getNearestWall(double low, double high, double limit) throws WallContainerException{
		if (low > high) throw new WallContainerException();
		Iterator<Wall> iterator = walls.iterator();
		Wall nextWall;
		while(iterator.hasNext()) {
			nextWall = iterator.next();
			if (isValidWall(nextWall, limit, low, high)) {
				return nextWall;
			}
		}
		return null;
	}
	
	public Iterator<Wall> iterator() {
		return walls.iterator();
	}
	

	protected abstract boolean isValidWall(Wall wall, double limit, double low, double high);
	
	protected abstract Comparator<Wall> getComparator();
	
	protected abstract boolean isCorrectWallType(Wall wall);
}
