package fernuni.propra.algorithm;

import static org.junit.Assert.*;

import java.util.LinkedList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;
import fernuni.propra.internal_data_model.Point;
import fernuni.propra.internal_data_model.Room;
import fernuni.propra.internal_data_model.Wall;

public class UserValidateAASTest {
	private IRoom roomSquare, roomStar, roomHufeisen;
	private Point pc1, pc2, pc3,pc4, pc5, pc6, pc7, pc8,pc9, pc10, pc11, pc12;
	private Point p31, p32, p33, p34, p35, p36, p37, p38;
	private LinkedList<Point> corners;
	
	@Before
	public void setup() {
		roomSquare = new Room("test", null, corners);		
		
		pc1 = new Point(1,-1);
		pc2 = new Point(2,-1);
		pc3 = new Point(2,1);
		pc4 = new Point(1,1);
		pc5 = new Point(1,2);
		pc6 = new Point(-1,2);
		pc7 = new Point(-1,1);
		pc8 = new Point(-2,1);
		pc9 = new Point(-2,-1);
		pc10 = new Point(-1,-1);
		pc11 = new Point(-1,-2);
		pc12 = new Point(1,-2);
		LinkedList<Point> cornersStar = new LinkedList<Point>();
		cornersStar.add(pc1);cornersStar.add(pc2);cornersStar.add(pc3);cornersStar.add(pc4);cornersStar.add(pc5);
		cornersStar.add(pc6);cornersStar.add(pc7);cornersStar.add(pc8);cornersStar.add(pc9);cornersStar.add(pc10);
		cornersStar.add(pc11);cornersStar.add(pc12);
		
		roomStar = new Room("star", null, cornersStar);
		
		p31 = new Point(-2,0);
		p32 = new Point(2,0);
		p33 = new Point(2,2);
		p34 = new Point(1,2);
		p35 = new Point(1,1);
		p36 = new Point(-1,1);
		p37 = new Point(-1,2);
		p38 = new Point(-2,2);
		LinkedList<Point> cornersHufeisen = new LinkedList<Point>();
		cornersHufeisen.add(p31);cornersHufeisen.add(p32);cornersHufeisen.add(p33);
		cornersHufeisen.add(p34);cornersHufeisen.add(p35);
		cornersHufeisen.add(p36);cornersHufeisen.add(p37);cornersHufeisen.add(p38);
		roomHufeisen = new Room("hufeisen", null, cornersHufeisen);
		
	}

	/**
	 * Tests whether roomStar is illuminated with 1 lamp in the center and
	 * whether roomSquare is not illuminated without a lamp and
	 * whether roomHufeisen is not illuminated with 1 lamp.
	 */
	@Test
	public void testValidate() {
		//Arrange
		// square
		UserValidateAAS userValidateAASSquare = new UserValidateAAS();
		
		// star
		UserValidateAAS userValidateAASStar = new UserValidateAAS();
		Lamp lamp1 = new Lamp(0,0);
		lamp1.turnOn();
		roomStar.addLamp(lamp1);
		
		// Hufeisen
		UserValidateAAS userValidateAASHufeisen = new UserValidateAAS();
		Lamp lamp3 = new Lamp (2,0);
		lamp3.turnOn();
		roomHufeisen.addLamp(lamp3);
		
		//Act
		boolean roomStarIlluminated = false;
		boolean roomSquareIlluminated = false;
		boolean roomHufeisenIlluminated = false;
		try {
			roomStarIlluminated = userValidateAASStar.validate(roomStar);
			roomSquareIlluminated = userValidateAASSquare.validate(roomSquare);
			roomHufeisenIlluminated = userValidateAASHufeisen.validate(roomHufeisen);
		} catch (UserValidateAASException e) {
			fail("Test result should have been found!");
		}
		
		//Assert
		assertTrue("roomStar needs to be illuminated with 1 lamp in its center",
				roomStarIlluminated);
		assertFalse("roomSquare should not be illuminated without a lamp!",
				roomSquareIlluminated);
		assertFalse("roomHufeisen should not be illuminated with just one lamp"
				    + "that is turned on", roomHufeisenIlluminated);
	}

}
