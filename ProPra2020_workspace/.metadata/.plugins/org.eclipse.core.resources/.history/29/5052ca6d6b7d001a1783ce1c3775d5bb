package fernuni.propra.internal_data_model;

import java.util.List;

public class LineSegment {
	private final Point p1;
	private final Point p2;
	
	public LineSegment(Point p1, Point p2) {
		// pre p1 != 0, p2 != 0
		this.p1 = p1;
		this.p2 = p2;
	}
	
	public Point getP1() {
		return p1;
	}
	
	public Point getP2() {
		return p2;
	}
	
	public boolean isHorizontal() {
		return p1.sameY(p2) && !p1.isEqual(p2);
	}
	
	public boolean isVertical() {
		return p1.sameX(p2) && !p1.isEqual(p2);
	}
	
	public boolean overlapsXrange(double xLow, double xHigh) {
		// pre xLow > xHigh
		boolean p1IsInRange = p1.isInXRange(xLow, xHigh);
		boolean p2IsInRange = p2.isInXRange(xLow, xHigh);
		boolean p1SmallerP2Greater = 
		
		return (Math.min(p1.getX(), p2.getX()) < xHigh) || 
				(Math.max(p1.getX(), p2.getX())> xLow);
	}
	
	public boolean overlapsYrange(double yLow, double yHigh) {
		return (Math.min(p1.getY(), p2.getY()) < yHigh) || 
				(Math.max(p1.getY(), p2.getY())>yLow);
	}
	
	public boolean perpendicular(Point p1, Point p2) {
		return Math.abs((this.p2.getX()-this.p2.getX()) * (p1.getX()-p2.getY()) +
				(this.p2.getY()-this.p2.getY()) * (p1.getY()-p2.getY())) < 0.01 ;
	}
	
	public boolean perpendicular(LineSegment other) {
		return perpendicular(other.getP1(), other.getP2());
	}
	
	public boolean lineSegmentDoesNotIntersectLineSegments(List<LineSegment> lineSegments) {
		if (lineSegments.isEmpty()) return true;
		boolean doesNotIntersect = true;
		for (int j = 0; j < lineSegments.size(); j++) {
			try {
				Point intersectionPoint = this.intersectionWithLinesegment(lineSegments.get(j));
				if (!intersectionPoint.isEqual(this.getP1()) 
						&& !intersectionPoint.isEqual(this.getP2()) ) {
					doesNotIntersect = false;
					break;
				}
			} catch (LineSegmentException e) {
				
			}
		}
		return doesNotIntersect;
	}
	
	public Point intersectionWithLinesegment(LineSegment other) throws LineSegmentException {
		if (perpendicular(other.getP1(), other.getP2())) {
			double x,y;
			if (isVertical()) {
				x = this.getP1().getX();
				y = other.getP1().getY();
			} else {
				x = other.getP1().getX();
				y = this.getP1().getY();
			}
			return new Point(x, y);
		} else {
			throw new LineSegmentException();
		}
				
	}
		
}
