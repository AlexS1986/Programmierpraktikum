package fernuni.propra.algorithm.runtime_information;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class RuntimeInformationTest {
	private RuntimeInformation rti1,rti2,rti3;

	@Before
	public void setUp() throws Exception {
		rti1 = new RuntimeInformation();
		rti2 = new RuntimeInformation();
		rti3 = new RuntimeInformation();
	}

	@Test
	public void testStartStopGetTimeCandidateSearch() {
		//Act
		// normal program flow
		long runtime = 0;
		try {
			rti1.startTimeCandidateSearch();
			rti1.stopTimeCandidateSearch();
			runtime = rti1.getElapsedTimeCandidateSearch();
		} catch (RuntimeExceptionLamps e) {
		}
		
		// incorrect program flow 1
		boolean incorrectProgramFlowDetected = false;
		try {
			rti2.stopTimeCandidateSearch();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected = true;
		}
		
		// incorrect program flow 2
		boolean incorrectProgramFlowDetected2 = false;
		try {
			rti3.getElapsedTimeCandidateSearch();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected2 = true;
		}
		
		//Assert
		
		// normal program flow
		assertTrue("Normal program flow failed",
				runtime>0);
		
		// incorrect program flow
		assertTrue("Incorrect program flow not detected",
				incorrectProgramFlowDetected);
		
		// incorrect program flow
		assertTrue("Incorrect program flow not detected",
				incorrectProgramFlowDetected2);
	}


	@Test
	public void testStopStartGetTimeOriginalPartialRectanglesFind() {
		//Act
		// normal program flow
		long runtime = 0;
		try {
			rti1.startTimeOriginalPartialRectanglesFind();;
			rti1.stopTimeOriginalPartialRectanglesFind();;
			runtime = rti1.getElapsedTimeOriginalPartialRectanglesFind();
			} catch (RuntimeExceptionLamps e) {
		}
				
		// incorrect program flow 1
		boolean incorrectProgramFlowDetected = false;
		try {
			rti2.stopTimeOriginalPartialRectanglesFind();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected = true;
		}
				
		// incorrect program flow 2
		boolean incorrectProgramFlowDetected2 = false;
		try {
			rti3.getElapsedTimeOriginalPartialRectanglesFind();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected2 = true;
		}
				
		//Assert
				
		// normal program flow
		assertTrue("Normal program flow failed",
					runtime>0);
				
		// incorrect program flow
		assertTrue("Incorrect program flow not detected",
				incorrectProgramFlowDetected);
				
		// incorrect program flow
		assertTrue("Incorrect program flow not detected",
				incorrectProgramFlowDetected2);
	}


	@Test
	public void testStartStopGetTimeOptimizePositions() {
		//Act
		// normal program flow
		long runtime = 0;
		try {
			rti1.startTimeOptimizePositions();
			rti1.stopTimeOptimizePositions();
			runtime = rti1.getElapsedTimeOptimizePositions();
		} catch (RuntimeExceptionLamps e) {
		}

		// incorrect program flow 1
		boolean incorrectProgramFlowDetected = false;
		try {
			rti2.stopTimeOptimizePositions();
			;
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected = true;
		}

		// incorrect program flow 2
		boolean incorrectProgramFlowDetected2 = false;
		try {
			rti3.stopTimeOptimizePositions();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected2 = true;
		}

		// Assert

		// normal program flow
		assertTrue("Normal program flow failed", runtime > 0);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected2);
	}

	@Test
	public void testStartStopGetTimeIlluminationTest() {
		//Act
		// normal program flow
		long runtime = 0;
		try {
			rti1.startTimeIlluminationTest();
			rti1.stopTimeIlluminationTest();
			runtime = rti1.getElapsedTimeIlluminationTest();
		} catch (RuntimeExceptionLamps e) {
		}

		// incorrect program flow 1
		boolean incorrectProgramFlowDetected = false;
		try {
			rti2.stopTimeIlluminationTest();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected = true;
		}

		// incorrect program flow 2
		boolean incorrectProgramFlowDetected2 = false;
		try {
			rti3.getElapsedTimeIlluminationTest();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected2 = true;
		}

		// Assert

		// normal program flow
		assertTrue("Normal program flow failed", runtime > 0);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected2);
	}


	@Test
	public void testStartStopGetTime() {
		//Act
		// normal program flow
		long runtime = 0;
		try {
			rti1.startTime();
			rti1.stopTime();
			runtime = rti1.getElapsedTime();
		} catch (RuntimeExceptionLamps e) {
		}

		// incorrect program flow 1
		boolean incorrectProgramFlowDetected = false;
		try {
			rti2.stopTime();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected = true;
		}

		// incorrect program flow 2
		boolean incorrectProgramFlowDetected2 = false;
		try {
			rti3.getElapsedTime();
		} catch (RuntimeExceptionLamps e) {
			incorrectProgramFlowDetected2 = true;
		}

		// Assert

		// normal program flow
		assertTrue("Normal program flow failed", runtime > 0);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected);

		// incorrect program flow
		assertTrue("Incorrect program flow not detected", 
				incorrectProgramFlowDetected2);
	}


	@Test
	public void testToString() {
		//Act
		String outString = rti1.toString();
		
		//Assert
		assertTrue("A String needs to be returned",
				outString != null);
	}

}
