package fernuni.propra.algorithm;

/**
 * An abstract factory that configures the solution algorithm by instantiating
 * specific instances of the interfaces {@link ICandidateSearcher},
 * {@link IPositionOptimizer} and {@link IIlluminationTester} that are to be
 * used within the algorithm.
 * <p>
 * The {@link AlgorithmFactory1} implements the "abstract factory" (concrete
 * factory) and "singleton" design patterns.
 * <p>
 * 
 * Implemented interfaces and super classes: {@link AbstractAlgorithmFactory}
 * 
 * @author alex
 *
 */
public class AlgorithmFactory1 extends AbstractAlgorithmFactory {
	private static AlgorithmFactory1 singleton;

	private AlgorithmFactory1() {
	};

	static AlgorithmFactory1 getAlgorithmFactory1() {
		if (singleton == null) {
			singleton = new AlgorithmFactory1();
		}
		return singleton;
	}

	@Override
	public ICandidateSearcher createCandidateSearcher() {
		return new CandidateSearcher();
	}

	@Override
	public IPositionOptimizer createPositionOptimizer() {
		return new PositionOptimizer();
	}

	@Override
	public IIlluminationTester createIlluminiationTester() {
		return new IlluminationTester();
	}

	@Override
	public IOriginalPartialRectanglesFinder createOriginalPartialRectanglesFinder() {
		return new OriginalPartialRectanglesFinder();
	}

}
