package fernuni.propra.main;

import java.util.StringTokenizer;

import fernuni.propra.algorithm.UserSolveAAS;
import fernuni.propra.algorithm.UserSolveAASException;
import fernuni.propra.algorithm.UserValidateAAS;
import fernuni.propra.algorithm.UserValidateAASException;
import fernuni.propra.file_processing.UserReadInputWriteOutputAAS;
import fernuni.propra.file_processing.UserReadInputWriteOutputException;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.user_interface.UserDisplayAAS;

/**
 * Main access point to this application.</br>
 *<p>
 * In this component, among other things the input 
 * parameters are parsed and handled.</br>
 * <p>
 * According to the choice of the parameters, 
 * the program flow is delegated to 
 * the matching use cases.
 * <p>
 */
public class Main {

	/**
	 * Haupteinstiegsfunktion
	 */
	private static final String generalHelpMessage =
			"Java -jar ProPra.jar r=runParameter "
			+ "if=\"pathToFile\" l=timeLimit \n \n "
			+ "The runParameter specified by r =runParameter is mandatory "
			+ "and must be one of s,sd,v,vd or d .\n "
			+ "The input file parameter is also mandatory. pathToFile "
			+ "specifies the full path to a valid input file. "
			+ "The \" before and after pathToFile are mandatory\n"
			+ "The time limit parameter is optional. "
			+ "For runParameter = s or runParameter = sd. "
			+ "This parameter specifies how long the solution "
			+ "algorithm searches for an optimal lamp layout. "
			+ "Time limit must be a positive integer number.";
	
	
	/**
	 * General access point to the functionality of this program.
	 * @param args Three input parameters have to be provided as 
	 * command line parameters in the form
	 * r=value_r if=pathToFile l=timeLimit.
	 * <p>
	 * The control flow parameter r is treated as follows:
	 * <ul>
	 * 
	 * <li>r="s" (solve): 
	 *  for the problem instance described by the given xml-file
	 *  a solution is computed. The computed lamp positions are saved to the
	 *  given xml-file. Already existing lamp positions will be replaced in the
	 *  xml-file.</li>
	 *  
	 * <li>r="sd" (solve & display): like r="s", 
	 *  except for the fact that the room, including lamps, is also displayed graphically. 
	 *  </li>
	 *  
	 * <li>r="v" (validate): 
	 * this option checks whether the room defined in the given xml-file is illuminated
	 * by its lamps. The result as well as the number of lamps is 
	 * printed to the command line display. .</li>
	 * 
	 * <li>r="vd" (validate & display): like r="v",  
	 * except for the fact that after validation
	 * the room is also displayed graphically. </li>
	 * 
	 * <li>r="d" (display): The room given by the specified xml-file, 
	 * including lamps is displayed graphically. </li>
	 * </ul>
	 * The input parameter "if" is a String that that 
	 * defines the absolute path to a valid xml-file that describes an room
	 * according to the format specified in [1]. If the room is not valid, an error
	 * message is printed to the command line display.
	 * <p>
	 * The parameter time limit parameter "l" is used to s
	 * pecify a time limit in seconds
	 * after which the computation will be aborted for the cases r="s" and r = "sd".
	 * The best available setting of lamps is displayed if a solution has been found,
	 * if not then no changes will be made to the xml-file and also nothing will be 
	 * displayed, except for a warning on the console.
	 * <p>
	 * [1] 	Aufgabenstellung Programmierpraktikum Fernuni 
	 * 		Hagen Sommersemester 2020, Listing 1
	 */
	public static void main(String[] args) {
		
		System.out.println("The input parameters you specified are:");
		for (String arg : args) { // Debug
			System.out.println(arg);
		}
		System.out.println();

		ParameterSet parameterSet = new ParameterSet();
		try {
			//parse input parameters by delegating to ParameterSet
			for (String paramString : args) {
				StringTokenizer st = new StringTokenizer(paramString, "=");
				if(st.countTokens()==2) {
					String parameterKey = st.nextToken().trim();
					String parameterValue = st.nextToken().trim();
					switch(parameterKey) {	
					case "r":
						parameterSet.setRunParameter(parameterValue);
						break;
					case "if":
						parameterSet.setInputFile(parameterValue);
						break;
					case "l":
						parameterSet.setTimeLimit(Integer.parseInt(
								parameterValue));
						break;
					default: // other parameter names are not valid
						throw new GeneralException();	
					}
					
				} else { // not a valid input format
					throw new GeneralException();
				}
			}
			
			if (parameterSet.isValidParameterSet() ) {
				IRoom room;
				UserReadInputWriteOutputAAS userReadWriteAAS;
				UserDisplayAAS userDisplayAAS;
				UserValidateAAS userValidateAAS;
				UserSolveAAS userSolveAAS;
				int numberOfLampsInSolution;
				
				printMessageToConsole("Starting computation ...");
				
				
				switch(parameterSet.getRunParameter()) {
				case "s":
					userReadWriteAAS = new UserReadInputWriteOutputAAS(
							parameterSet.getInputFile());
					room = userReadWriteAAS.readInput();
					userSolveAAS = new UserSolveAAS();
					numberOfLampsInSolution = userSolveAAS.solve(
							room, parameterSet.getTimeLimit());
					userReadWriteAAS.writeOutput(room);
					break;
				case "sd":
					userReadWriteAAS = new UserReadInputWriteOutputAAS(
							parameterSet.getInputFile());
					room = userReadWriteAAS.readInput();
					userSolveAAS = new UserSolveAAS();
					numberOfLampsInSolution = userSolveAAS.solve(
							room, parameterSet.getTimeLimit());
					userReadWriteAAS.writeOutput(room);
					userDisplayAAS = new UserDisplayAAS();
					userDisplayAAS.display(room);
					
					printMessageToConsole(
							"Number of lamps necessary:" + 
					numberOfLampsInSolution); // TODO
					printMessageToConsole(
							userSolveAAS.getRuntimeInformation().toString());
					break;
				case "v":
					userReadWriteAAS = new UserReadInputWriteOutputAAS(
							parameterSet.getInputFile());
					room = userReadWriteAAS.readInput();
					userValidateAAS = new UserValidateAAS();
					userValidateAAS.validate(room);
					printMessageToConsole(userValidateAAS.getResultString());
					break;
				case "vd":
					userReadWriteAAS = new UserReadInputWriteOutputAAS(
							parameterSet.getInputFile());
					room = userReadWriteAAS.readInput();
					userValidateAAS = new UserValidateAAS();
					userValidateAAS.validate(room);
					//System.out.println(userValidateAAS.getResultString());
					printMessageToConsole(userValidateAAS.getResultString());
					userDisplayAAS = new UserDisplayAAS();
					userDisplayAAS.display(room);
					break;
				case "d":
					userReadWriteAAS = new UserReadInputWriteOutputAAS(
							parameterSet.getInputFile());
					room = userReadWriteAAS.readInput();
					userDisplayAAS = new UserDisplayAAS();
					userDisplayAAS.display(room);
					break;
				default:
					
				}
				printMessageToConsole(
						"Computation finished ...");
				
						
			} else {
				throw new GeneralException();
			}
			
			
			
		}catch (ParameterSetException e) {
			printMessageToConsole(e.getMessage());
			System.exit(0);
		} catch(NumberFormatException nfe) {
			printMessageToConsole("The timeLimit parameter specified by "
					+ "l=timeLimit is not an integer number");
		} catch(GeneralException ge) {
			printMessageToConsole(generalHelpMessage);
			System.exit(0); 
		} catch (UserReadInputWriteOutputException e) {
			printMessageToConsole(e.getMessage());
			System.exit(0);
		} catch (UserValidateAASException e) {
			printMessageToConsole(e.getMessage());
			System.exit(0);
		} catch (UserSolveAASException e) {
			printMessageToConsole(e.getMessage());
			System.exit(0);
		}
			
	}
	
	private static void printMessageToConsole(String message) {
		System.out.println(message);
	}
}
