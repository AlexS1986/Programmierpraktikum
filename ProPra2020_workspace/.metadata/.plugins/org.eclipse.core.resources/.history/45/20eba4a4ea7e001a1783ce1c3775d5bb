package fernuni.propra.user_interface;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import fernuni.propra.file_processing.UserReadInputWriteOutputAAS;
import fernuni.propra.file_processing.UserReadInputWriteOutputException;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;
import fernuni.propra.internal_data_model.LineSegment;
import fernuni.propra.internal_data_model.Point;

public class RoomFrameTest {
	Point p1,p2,p3,p4,p5;
	LineSegment l1,l2,l3,l4,l5;
	List<LineSegment> lineSegments;
	List<IRoom> rooms;
	
	
	@Before
	public void setUp() {
		p1 = new Point (-1,-1);
		p2 = new Point (1,-1);
		p3 = new Point(1,1);
		p4 = new Point(-1,1);
		l1 = new LineSegment(p1, p2);
		l2 = new LineSegment(p2, p3);
		l3 = new LineSegment(p3,p4);
		l4 = new LineSegment(p4,p1);
		l5 = new LineSegment(p1, p3);
		
		lineSegments = new ArrayList<LineSegment>();
		lineSegments.add(l1);lineSegments.add(l2); lineSegments.add(l3); lineSegments.add(l4);
		
		
		String[] xmlPathesOK = {"instances/validationInstances/Selbsttest_clockwise.xml",
				"instances/validationInstances/Selbsttest_counterClockwise.xml",
				"instances/validationInstances/Selbsttest_100a_incomplete.xml",
				"instances/validationInstances/Selbsttest_100a_incomplete.xml",
				"instances/validationInstances/Selbsttest_100a_solved.xml",
				"instances/validationInstances/Selbsttest_100a.xml",
				"instances/validationInstances/Selbsttest_100b.xml",
				"instances/validationInstances/Selbsttest_20a_incomplete.xml",
				"instances/validationInstances/Selbsttest_20a_solved.xml",
				"instances/validationInstances/Selbsttest_20a.xml",
				"instances/validationInstances/Selbsttest_20b.xml",
				"instances/validationInstances/Selbsttest_20c.xml"		
		};
		
		rooms = new ArrayList<IRoom>();
		
		for(String xmlPath : xmlPathesOK) {
			UserReadInputWriteOutputAAS readAAS = new UserReadInputWriteOutputAAS(xmlPath);
			try {
				rooms.add(readAAS.readInput());
			} catch (UserReadInputWriteOutputException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
			
	}

	@Test
	public void testRoomFrame() {
		
		//Arrange
		IRoom mockRoom = new IRoom() {
			@Override
			public Iterator<Lamp> getLamps() {
				List<Lamp> lamps = new ArrayList<Lamp>();
				Lamp lamp = new Lamp(0.0,0.0);
				lamps.add(lamp);
				lamp.turnOn();
				return lamps.iterator();
			}

			@Override
			public int getNumberOfLamps() {
				// TODO Auto-generated method stub
				return 0;
			}

			@Override
			public Iterator<Point> getCorners() {
				List<Point> corners = new ArrayList<Point>();
				corners.add(p1); corners.add(p2); corners.add(p3); corners.add(p4);
				return corners.iterator();
			}

			@Override
			public void addLamp(Lamp lamp) {

				
			}

			@Override
			public Iterator<LineSegment> getWalls() {
				return lineSegments.iterator();
			}

			@Override
			public double getMinX() {
				return -1;
			}

			@Override
			public double getMaxX() {
				return 1.0;
			}

			@Override
			public double getMinY() {
				return -1.0;
			}

			@Override
			public double getMaxY() {
				return 1.0;
			}
			
		};
		RoomPanel roomPanel = new RoomPanel(mockRoom);
		//RoomFrame roomFrame = new RoomFrame(roomPanel);
		RoomFrame roomFrame = new RoomFrame(roomPanel);
		try {
			Thread.currentThread().sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		roomFrame.dispose();
		
		
		
		
		/*for (IRoom room : rooms) {
			RoomPanel tmpRoomPanel = new RoomPanel(room);
			RoomFrame tmpRoomFrame = new RoomFrame(tmpRoomPanel);
			try {
				Thread.currentThread().sleep(3000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			tmpRoomFrame.dispose();
		}*/
		
	}

}
