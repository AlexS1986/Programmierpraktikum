package fernuni.propra.main;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class ParameterSetTest {
	private ParameterSet p1, p3;
	private String[] validRunParameters = { "s", "sd", "v", "vd", "d" };
	
	@Before
	public void setUp() throws Exception {
		p1 = new ParameterSet();
		p3 = new ParameterSet();
	}

	@Test
	public void testSetRunParameter() {
		//Arrange
		String invalidParameter = "test";
		
		//Act
		//valid parameters
		boolean parameterAccepted = true;
		for (String validParameter : validRunParameters) {
			ParameterSet p2 = new ParameterSet();
			try {
				p2.setRunParameter(validParameter);
			} catch (ParameterSetException pe) {
				parameterAccepted = false;
			}
		}
		
		//invalid parameters
		boolean invalidParameterAccepted = true;
		try {
			p1.setRunParameter(invalidParameter);
		} catch(ParameterSetException pe) {
			invalidParameterAccepted = false;
		}
		
		//Assert
		assertTrue("A valid parameter has not been "
				+ "accepted",parameterAccepted);
		assertFalse("An invalid parameter has been"
				+ "accepted,",invalidParameterAccepted);
		
	}

	@Test
	public void testSetInputFile() {
		//Arrange
		
		//Act
		boolean validParameterAccepted = false;
		try {
			p1.setInputFile("file");
			validParameterAccepted = true;
		} catch (ParameterSetException e) {
		}
		
		//Act
		boolean invalidParameterAccepted = true;
		try {
			p1.setInputFile(null);
		} catch (ParameterSetException e) {
			invalidParameterAccepted = false;
		}
		
		//Assert
		assertTrue("A valid parameter has not been "
				+ "accepted",validParameterAccepted);
		assertFalse("An invalid parameter has been"
				+ "accepted,",invalidParameterAccepted);
	}

	@Test
	public void testSetTimeLimit() {
		//Arrange
		
		//Act
		boolean firstSetWorked = false;
		boolean secondSetWorked = false;
		try {
			p1.setTimeLimit(1);
			firstSetWorked = true;
			p1.setTimeLimit(0);
			secondSetWorked = true;
		} catch(ParameterSetException pe) {
			
		}
		
		//Assert
		assertTrue("The first set should have worked",
				firstSetWorked);
		assertFalse("A second setTimeLimit call should not have"
				+ "been accepted wo Exception.",
				secondSetWorked);
	}

	@Test
	public void testIsValidParameterSet() {
		//Arrange
		boolean testOnlyRunAccepted = true;
		try {
			p1.setRunParameter("sd");
			testOnlyRunAccepted = p1.isValidParameterSet();
		} catch (ParameterSetException e) {
			testOnlyRunAccepted = false;
		}
		
		try {
			p1.setRunParameter("test");
		} catch (ParameterSetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		

	}

	@Test
	public void testGetRunParameter() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetInputFile() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetTimeLimit() {
		fail("Not yet implemented");
	}

}
