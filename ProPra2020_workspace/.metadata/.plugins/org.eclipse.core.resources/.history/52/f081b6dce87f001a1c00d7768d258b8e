package fernuni.propra.algorithm;

import java.util.Comparator;
import java.util.TreeMap;

import fernuni.propra.internal_data_model.Wall;

public abstract class WallContainerTree {
	private TreeMap<Double, LinkedListForWallsWithKey> walls;
	private static final double TOL = 0.00001;
	
	public WallContainerTree() {		
		walls = new TreeMap<Double, LinkedListForWallsWithKey>( 
				new Comparator<Double>() {
			@Override
			public int compare(Double o1, LinkedListForWallsWithKey o2) {
				if (Math.abs(o1.getKey() - o2.getKey()) < TOL) {
					return 0;
				} else {
					if(o1.getKey()<o2.getKey()) {
						return -1;
					} else {
						return 1;
					}
				}
			}
		});
	}
	
	
	public void addWall(Wall wall) {
		double key = determineKeyOfWall(wall);
		
	}
	
	protected abstract double determineKeyOfWall(Wall wall) ;
	
}
