package fernuni.propra.algorithm;

/**
 * An abstract factory that configures the solution algorithm by instantiating specific instances of the 
 * interfaces {@link ICandidateSearcher}, {@link IPositionOptimizer} and {@link IIlluminationTester} that are
 * to be used within the algorithm.
 * <p>
 * The {@link AlgorithmFactory} implements the "abstract factory" (concrete factory) and "singleton" design patterns.
 * <p>
 * <p> 
 * Implemented interfaces and super classes: {@link ICandidateSearcher}
 * 
 * @author alex
 *
 */
public class AlgorithmFactory extends AbstractAlgorithmFactory{
	private static AlgorithmFactory singleton; 
	
	private AlgorithmFactory() {}
	
	public static AlgorithmFactory getAlgorithmFactory() {
		if (singleton == null) {
			singleton = new AlgorithmFactory();
		}	
		return singleton;
	}
	
	@Override
	public ICandidateSearcher createCandidateSearcher() {
		return new CandidateSearcher();
	}

	@Override
	public IPositionOptimizer createPositionOptimizer() {
		return new PositionOptimizer();
	}
	
	@Override
	public IIlluminationTester createIlluminiationTester() {
		return new IlluminationTester();
	}

}
