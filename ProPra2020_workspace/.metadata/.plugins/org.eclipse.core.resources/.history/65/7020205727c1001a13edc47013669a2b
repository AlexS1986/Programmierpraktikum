package fernuni.propra.internal_data_model;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

public class RoomTest {
	
	Point p1,p2,p3,p4,p5;
	LineSegment l1,l2,l3,l4,l5;
	List<LineSegment> lineSegments;
	LinkedList<Point> corners, cornersClockWise;


	@Before
	public void setUp() {
		p1 = new Point (0,0);
		p2 = new Point (1,0);
		p3 = new Point(1,1);
		p4 = new Point(0,1);
		l1 = new LineSegment(p1, p2);
		l2 = new LineSegment(p2, p3);
		l3 = new LineSegment(p3,p4);
		l4 = new LineSegment(p4,p1);
		l5 = new LineSegment(p1, p3);
		
		corners= new LinkedList<Point>();
		corners.add(p1); corners.add(p2); corners.add(p3);corners.add(p4);
		
		cornersClockWise = new LinkedList<Point>();
		cornersClockWise.add(p1); cornersClockWise.add(p4); cornersClockWise.add(p3); cornersClockWise.add(p2);
		
		lineSegments = new ArrayList<LineSegment>();
		lineSegments.add(l1);lineSegments.add(l2); lineSegments.add(l3); lineSegments.add(l4);
	}

	@Test
	public void testGetWalls() {
		// Arrange
		Room room = new Room("test",null, corners);
		Room roomClockWise = new Room("test", null, cornersClockWise);
		
		// Act
		Iterator<Wall> wallIterator = room.getWalls();
		Iterator<Wall> wallIteratorClockWise = roomClockWise.getWalls();
		
		//Assert
		Wall w1 = wallIterator.next();
		Wall w2 = wallIterator.next();
		Wall w3 = wallIterator.next();
		Wall w4 = wallIterator.next();
		
		Wall w5 = wallIteratorClockWise.next();
		Wall w6 = wallIteratorClockWise.next();
		Wall w7 = wallIteratorClockWise.next();
		Wall w8 = wallIteratorClockWise.next();
		
		boolean test1 = w1.equals(l1);
		boolean test2 = w2.equals(l2);
		boolean test3 = w3.equals(l3);
		boolean test4 = w4.equals(l4);
		
		
		boolean test5 = w5.equals(l2);
		boolean test6 = w6.equals(l3);
		boolean test7 = w7.equals(l4);
		boolean test8 = w8.equals(l1);
		
		assertTrue("Counter clockwise room does not work",
				test1 && test2 && test3 && test4);
		assertTrue("Clock Wise Room does not work",
				test5 && test6 && test7 && test8);
	}
	
	@Test
	public void testGetLamps() {
		//Arrange
		Room room = new Room("test",null, corners);
		Lamp lamp1 = new Lamp(0,0);
		Lamp lamp2 = new Lamp(0,0);
		
		//Act
		Iterator<Lamp> lampIterator = room.getLamps();
		Lamp outLamp1 = lampIterator.next();
		Lamp outLamp2 = lampIterator.next();
		
		//Assert
		assertSame(lamp1,outLamp1);
		assertSame(lamp2,outLamp2);
		
	}

	@Test
	public void testGetCorners() {
		fail("Not yet implemented");
	}

	@Test
	public void testAddLamp() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetNumberOfLamps() {
		//Arrange
		Room room = new Room("test",null, corners);
		for (int i=0;i<21;i++) {
			Lamp tmpLamp = new Lamp(0, 0);
			room.addLamp(tmpLamp);
		}
		
		//Act
		int numberLamps = room.getNumberOfLamps();
		
		//Assert
		assertTrue("21 lamps should have been returned",
				numberLamps==21);
		
	}
	
	@Test
	public void testDimensions() {
		// Arrange
		Room room = new Room("test",null, corners);
		LinkedList<Point> corners2 = new LinkedList<Point>();
		Point p1 = new Point(-321.32,-432);
		corners2.add(p1); corners2.add(p2); corners2.add(p3); corners2.add(p4);
		Room room2 = new Room("test",null, corners2);
		
		//Act
		double xMin = room.getMinX();
		double xMax = room.getMaxX();
		double yMin = room.getMinY();
		double yMax = room.getMaxY();
		
		double xMin2 = room2.getMinX();
		double xMax2 = room2.getMaxX();
		double yMin2 = room2.getMinY();
		double yMax2 = room2.getMaxY();
		
		
		//Assert
		assertEquals(0.0, xMin, 0.0001);
		assertEquals(1.0, xMax, 0.0001);
		assertEquals(0.0, yMin, 0.0001);
		assertEquals(1.0, yMax, 0.0001);
		
		//Assert
		assertEquals(-321.32, xMin2, 0.0001);
		assertEquals(1.0, xMax2, 0.0001);
		assertEquals(-432, yMin2, 0.0001);
		assertEquals(1.0, yMax2, 0.0001);
		
	}
	

}
