package fernuni.propra.algorithm;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import fernuni.propra.algorithm.runtime_information.RuntimeInformation;
import fernuni.propra.file_processing.UserReadInputWriteOutputAAS;
import fernuni.propra.file_processing.UserReadInputWriteOutputException;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Point;
import fernuni.propra.internal_data_model.Wall;

public class ValidateKTest {
	Point p1,p2,p3,p4,p5;
	Wall w1,w2,w3,w4,w5;
	List<Wall> walls;
	List<IRoom> rooms;
	
	
	@Before
	public void setUp() {
		p1 = new Point (-1,-1);
		p2 = new Point (1,-1);
		p3 = new Point(1,1);
		p4 = new Point(-1,1);
		w1 = new Wall(p1, p2,0);
		w2 = new Wall(p2, p3,0);
		w3 = new Wall(p3,p4,0);
		w4 = new Wall(p4,p1,0);
		w5 = new Wall(p1, p3,0);
		
		walls = new ArrayList<Wall>();
		walls.add(w1);walls.add(w2); 
		walls.add(w3); walls.add(w4);
		
		String[] xmlPathesOK = {
				"instances/validationInstances/Selbsttest_clockwise.xml",
				"instances/validationInstances/Selbsttest_counterClockwise.xml",
				"instances/validationInstances/Selbsttest_100a_incomplete.xml",
				"instances/validationInstances/Selbsttest_100a_solved.xml",
				"instances/validationInstances/Selbsttest_100a.xml",
				"instances/validationInstances/Selbsttest_100b.xml",
				"instances/validationInstances/Selbsttest_20a_incomplete.xml",
				"instances/validationInstances/Selbsttest_20a_solved.xml",
				"instances/validationInstances/Selbsttest_20a.xml",
				"instances/validationInstances/Selbsttest_20b.xml",
				"instances/validationInstances/Selbsttest_20c.xml"		
		};
		
		rooms = new ArrayList<IRoom>();
		
		for(String xmlPath : xmlPathesOK) {
			UserReadInputWriteOutputAAS readAAS 
			= new UserReadInputWriteOutputAAS(xmlPath);
			try {
				rooms.add(readAAS.readInput());
			} catch (UserReadInputWriteOutputException e) {
			}
		}
			
	}
	
	
	@Test
	public void testValidate() {
		// Arrange
		IRoom room = rooms.get(2);
		IRoom room2 = rooms.get(7);
		ValidateK vK = new ValidateK();
		
		//Act
		boolean illuminated = true;
		boolean iluminated2 = false;
		try {
			illuminated = vK.validate(room, new RuntimeInformation());
			iluminated2 = vK.validate(room2, new RuntimeInformation());
		} catch (ValidateKException e) {
			
		}
		
		//Assert
		assertFalse("This room should be illuminated",
				illuminated);
		assertTrue("This room should not be illuminated",
				iluminated2);
		
	}

}
