package fernuni.propra.internal_data_model;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

public class RoomTest {
	
	Point p1,p2,p3,p4,p5;
	LineSegment l1,l2,l3,l4,l5;
	List<LineSegment> lineSegments;
	LinkedList<Point> corners;


	@Before
	public void setUp() {
		p1 = new Point (0,0);
		p2 = new Point (1,0);
		p3 = new Point(1,1);
		p4 = new Point(0,1);
		l1 = new LineSegment(p1, p2);
		l2 = new LineSegment(p2, p3);
		l3 = new LineSegment(p3,p4);
		l4 = new LineSegment(p4,p1);
		l5 = new LineSegment(p1, p3);
		
		corners= new LinkedList<Point>();
		corners.add(p1); corners.add(p2); corners.add(p3);corners.add(p4);
		lineSegments = new ArrayList<LineSegment>();
		lineSegments.add(l1);lineSegments.add(l2); lineSegments.add(l3); lineSegments.add(l4);
	}

	@Test
	public void testGetLamps() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetCorners() {
		fail("Not yet implemented");
	}

	@Test
	public void testAddLamp() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetNumberOfLamps() {
		fail("Not yet implemented");
	}
	
	@Test
	public void testDimensions() {
		// Arrange
		Room room = new Room("test",null, corners, false);
		LinkedList<Point> corners2 = new LinkedList<Point>();
		Point p1 = new Point(-321.32,-432);
		corners2.add(p1); corners2.add(p2); corners2.add(p3); corners2.add(p4);
		Room room2 = new Room("test",null, corners2, false);
		
		//Act
		double xMin = room.getMinX();
		double xMax = room.getMaxX();
		double yMin = room.getMinY();
		double yMax = room.getMaxY();
		
		double xMin2 = room2.getMinX();
		double xMax2 = room2.getMaxX();
		double yMin2 = room2.getMinY();
		double yMax2 = room2.getMaxY();
		
		
		//Assert
		assertEquals(0.0, xMin, 0.0001);
		assertEquals(1.0, xMax, 0.0001);
		assertEquals(0.0, yMin, 0.0001);
		assertEquals(1.0, yMax, 0.0001);
		
		//Assert
		assertEquals(-321.32, xMin2, 0.0001);
		assertEquals(1.0, xMax2, 0.0001);
		assertEquals(-432, yMin2, 0.0001);
		assertEquals(1.0, yMax2, 0.0001);
		
	}
	
	@Test
	public void testGetMostBottomMostRightPoint() {
		//Arrange
		Room room = new Room("test",null, corners, false);
		
		//Act 
		Point p1 = room.getMostBottomMostRightPoint();
		
		//Assert
		assertTrue(p1.isEqual(p2));
	}
	
	@Test
	public void testIsCounterClockWise() {
		//Arrange
		Room room = new Room("test",null, corners, false);
		
		//Act 
		boolean test1 = room.getMostBottomMostRightPoint();
		
		//Assert
		assertTrue(p1.isEqual(p2));
	}

}
