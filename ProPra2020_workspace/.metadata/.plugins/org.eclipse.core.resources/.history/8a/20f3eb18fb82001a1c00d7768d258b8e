package fernuni.propra.algorithm;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;

public class PositionOptimizer implements IPositionOptimizer{
	private static List<Lamp> currentBestSolution;
	private static int numberIlluminatedLampsBestSolution;
	private static IIlluminationTester illuminationTester = AlgorithmFactory.getAlgorithmFactory().createIlluminiationTester();

	public PositionOptimizer() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void optimizePositions(IRoom room, List<Lamp> taggedCandidates, IRuntimePositionOptimizer runTimeInformation) {
		currentBestSolution = taggedCandidates;
		
		HashSet<Integer> allTags = new HashSet<Integer>();
		for (Lamp lamp : taggedCandidates) {
			lamp.turnOn(); // make sure all lamps are turned off
			Iterator<Integer> tagIterator = lamp.iteratorTag();
			while(tagIterator.hasNext()) {
				allTags.add(tagIterator.next());
			}
		}
		
		ArrayList<Lamp> lamps = deepCopyLamps(taggedCandidates);
		
		HashSet<Integer> illuminated = deepCopyHashSet(allTags);
		
		searchSolution(lamps,0, illuminated, allTags, lamps.size(),runTimeInformation);
		
		 
		
	}
	
	private static void searchSolution(List<Lamp> lamps, int index,HashSet<Integer> illuminated, 
			HashSet<Integer> allTags, int numberLampsOn, IRuntimePositionOptimizer runTimeInformation) {
		if(illuminated.containsAll(allTags)) { // valid solution found
			if (currentBestSolution == null) {
				currentBestSolution = lamps;
			} else { // only save best solution
				if (numberLampsOn<numberIlluminatedLampsBestSolution) {
					currentBestSolution = lamps;
					numberIlluminatedLampsBestSolution = numberLampsOn;
				}
			}
		} else { // not a valid solution
			if(numberLampsOn<numberIlluminatedLampsBestSolution) {
				
			}
		}
	}
	
	
	private static ArrayList<Lamp> deepCopyLamps(List<Lamp> lamps) {
		ArrayList<Lamp> outLamps = new ArrayList<Lamp>(lamps.size());
		Iterator<Lamp> lampsIterator = lamps.iterator();
		while(lampsIterator.hasNext()) {
			Lamp lamp = lampsIterator.next();
			outLamps.add(lamp.deepCopy());
		}
		return outLamps;
	}
	
	private static HashSet<Integer> deepCopyHashSet(HashSet<Integer> hashSet) {
		HashSet<Integer> outHashSet = new HashSet<Integer>();
		for (Integer integer : hashSet) {
			Integer outInteger = (int) integer;
			outHashSet.add(outInteger);
		}
		return outHashSet;
	}
	
	

}
