package fernuni.propra.algorithm.util;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import fernuni.propra.internal_data_model.Point;

/**
 * A rectangle that can also be tagged, i.e. have a set of integers that represent the tags.
 * <p>
 * The {@link RectangleWithTag} is designed to represent an original partial rectangle of an {@link IRoom}
 * instance.
 * The tags typically represent the portions of the {@link IRoom} that are illuminated if the associated
 * {@link RectangleWithTag} is illuminated. This means that the union of the
 *  tags of all {@RectangleWithTag}s of an {@link IRoom} should be equal to all tags, i.e. all portions of the
 *  {@link IRoom}. The tags are stored internally as a {@link HashSet}<{@link Integer}>.
 * <p> 
 * <p>
 * Extended classes: {@link Rectangle}
 * <p>
 * @author alex
 *
 */
public class RectangleWithTag extends Rectangle{

	private HashSet<Integer> tags = new HashSet<Integer>(); // the tags of the Rectangle
	
	/**
	 * Constructor
	 * @param p1 : left bottom {@link Point}
	 * @param p3 : top right {@link Point}
	 * @param initialTags : a {@link Collection} of initial tags.
	 */
	public RectangleWithTag(Point p1, Point p3, Collection<Integer> initialTags) {
		super(p1,p3);
		if (initialTags != null) {
			tags.addAll(initialTags);
		}
	}
	
	/**
	 * Constructor
	 * @param rectangle : A {@link Rectangle} that is used to create the new {@link RectangleWithTag}
	 * @param initialTags : a {@link Collection} of initial tags.
	 */
	public RectangleWithTag(Rectangle rectangle, Collection<Integer> initialTags) {
		this(rectangle.getP1(), rectangle.getP3(), initialTags);
	}
	
	/**
	 * Constructor
	 * @param p1 : left bottom {@link Point}
	 * @param p3 : top right {@link Point}
	 * @param initialTags : a single  initial tag.
	 */
	public RectangleWithTag(Point p1, Point p3, Integer initialTag) {
		super(p1,p3);
		if (initialTag != null) {
			tags.add(initialTag);
		}
	}
	
	/**
	 * Constructor
	 * @param rectangle : A {@link Rectangle} that is used to create the new {@link RectangleWithTag}
	 * @param initialTag : a single initial tag.
	 */
	public RectangleWithTag(Rectangle rectangle, Integer initialTag) {
		this(rectangle.getP1(),rectangle.getP3(), initialTag);
	}
	
	/**
	 * Tests whether the tags of this {@link RectangleWithTag} contain a certain tag
	 * @param tag : the integer tag that is to be checked
	 * @return : a boolean that represents whether this {@link RectangleWithTag} contains the tag
	 */
	public boolean containsTag(Integer tag) {
		return tags.contains(tag);
	}

	/**
	 * Adds a certain tag to the tags of this {@link Rectangle}
	 * @param tag : the integer tag to be added
	 */
	public void addTag(Integer tag) {
		tags.add(tag);
	}
	
	/**
	 * Returns an iterator of tags
	 * @return : An {@link Iterator}<{@link Integer}> that represents the tags of this {@link RectangleWithTag}.
	 */
	public Iterator<Integer> getTagIterator() {
		return tags.iterator();
	}
	
	
	
	
	
	public HashSet<Integer> getCopyOfTags() { 
		HashSet<Integer> outTags = new HashSet<Integer>();
		for (Integer tag : tags) {
			outTags.add(tag);
		}
		return outTags;
	}
	
	
	private int getSumOfTags() {
		int result = 0;
		for (Integer tag: tags) {
			result = result + tag;
		}
		return result;
	}
	
	@Override
	public boolean equals(Object o) {
		if (o == this) return true;
		if(!(o instanceof RectangleWithTag)) {
			return false;
		}
		RectangleWithTag r = (RectangleWithTag) o;
		return getP1().isEqual(r.getP1()) && getP2().isEqual(r.getP2()) 
				&& getP3().isEqual(r.getP3()) && getP4().isEqual(r.getP4()) && getSumOfTags() == r.getSumOfTags() ;
	}
	
	@Override
	public int hashCode() {
		int result = 17;
		result = 31 * result + getP1().hashCode();
		result = 31 * result + getP3().hashCode();
		result = 31 * result + getSumOfTags();
		return result;
	}
	
}
