package fernuni.propra.user_interface;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.util.Iterator;

import javax.swing.JPanel;

import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;
import fernuni.propra.internal_data_model.LineSegment;
import fernuni.propra.internal_data_model.Point;
import fernuni.propra.user_interface.RoomPanel.PlotRectangle;

public abstract class RoomPanelAbstract extends JPanel{
	private IRoom room;
	private double scale;
	
	
	public RoomPanelAbstract(IRoom room) {
		this.room = room;
		setBackground(Color.WHITE);
		setPreferredSize(new Dimension(1024, 768));
	}
	
	String getRoomID() {
		return room.getID();
	}
	
	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2D= (Graphics2D) g;
		g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		transformToRoomCoordinates(g2D);
		drawRoom(g2D);
		
		scaleBackToScreenCoordinates(g2D);
		drawLamps(g2D);
		drawRectangles(g2D); // TODO nur Test
			
	}
	
	private void drawLamps(Graphics2D g2D) {
		Iterator<Lamp> lampIterator = room.getLamps();
		while(lampIterator.hasNext()) {
			Lamp lamp = lampIterator.next();
			Color lampColor = lamp.getOn() ? Color.YELLOW :  Color.DARK_GRAY;
			g2D.setColor(lampColor);
			g2D.fillOval( (int) (lamp.getX() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), 
					(int) (lamp.getY() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), PIXEL_LAMP_DIAMETER, PIXEL_LAMP_DIAMETER);
			g2D.setStroke(new BasicStroke(2));
			g2D.setColor(Color.BLACK);
			g2D.drawOval((int) (lamp.getX() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), 
					(int) (lamp.getY() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), PIXEL_LAMP_DIAMETER, PIXEL_LAMP_DIAMETER);
		}
		
	}

	private void scaleBackToScreenCoordinates(Graphics2D g2D) {
		AffineTransform myTransform;
		myTransform = AffineTransform.getScaleInstance(1/scale, 1/scale);
		g2D.transform(myTransform);
	}

	protected abstract void drawRoom(Graphics2D g2D) ;

	private void transformToRoomCoordinates(Graphics2D g2D) {
		double sx =  (0.9 * getWidth())/(room.getMaxX()-room.getMinX());
		double sy =  (0.9 * getHeight())/(room.getMaxY()-room.getMinY());
		
		scale = Math.min(sx, sy);
		double centerOffset = 0.5*Math.min(0.1*getWidth(),0.1*getHeight());
		AffineTransform myTransform = AffineTransform.getScaleInstance(scale, scale);
		g2D.transform(myTransform);
		myTransform = AffineTransform.getTranslateInstance(-room.getMinX() + centerOffset/scale,-room.getMinY() + centerOffset/scale);
		g2D.transform(myTransform);
	}
	
	protected abstract void drawRectangles(Graphics2D g2D);
		
}
