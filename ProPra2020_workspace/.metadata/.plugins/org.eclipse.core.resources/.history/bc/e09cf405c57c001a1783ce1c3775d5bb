package fernuni.propra.internal_data_model;



public class Wall {
	private final Point p1;
	private final Point p2;
	
	public Wall(Point p1, Point p2) {
		this.p1 = p1;
		this.p2 = p2;
	}
	
	public Point getP1() {
		return p1;
	}
	
	public Point getP2() {
		return p2;
	}
	
	public boolean isNorthWall() {
		return p1.getX() > p2.getX() && (p1.getY() == p2.getY());
	}
	
	boolean isWestWall() {
		return p1.getY() < p2.getY() && (p1.getX() == p2.getX());
	}
	
	boolean isSouthWall() {
		return p1.getX() < p2.getX() && (p1.getY() == p2.getY());
	}
	
	public boolean isEastWall() {
		return p1.getY() < p2.getY() && (p1.getX() == p2.getX());
	}

	boolean overlapsXrange(double xLow, double xHigh) {
		return (Math.min(p1.getX(), p2.getX()) < xHigh) || 
				(Math.max(p1.getX(), p2.getX())>xLow);
	}
	
	public boolean overlapsYrange(double yLow, double yHigh) {
		return (Math.min(p1.getY(), p2.getY()) < yHigh) || 
				(Math.max(p1.getY(), p2.getY())>yLow);
	}
	
	public Point intersectionWithWall(Wall wall) throws WallException {
		if (isPerpendicularToLineDefinedByPoints(wall.getP1(), wall.getP2())) {
			double x,y;
			if (this.isEastWall() || this.isWestWall()) {
				x = this.getP1().getX();
				y = wall.getP1().getY();
			} else {
				x = wall.getP1().getX();
				y = this.getP1().getY();
			}
			return new Point(x, y);
		} else {
			throw new WallException();
		}
				
	}
	
	private boolean isPerpendicularToLineDefinedByPoints(Point p1, Point p2) {
		return Math.abs((this.p2.getX()-this.p2.getX()) * (p1.getX()-p2.getY()) +
				(this.p2.getY()-this.p2.getY()) * (p1.getY()-p2.getY())) < 0.01 ;
	}
	
	public boolean perpendicular(Wall other) {
		return isPerpendicularToLineDefinedByPoints(other.getP1(), other.getP2());
	}
	
}
