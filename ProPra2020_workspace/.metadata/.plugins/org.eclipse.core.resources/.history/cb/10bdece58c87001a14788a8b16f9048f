package fernuni.propra.algorithm;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.algorithm.util.Rectangle;
import fernuni.propra.algorithm.util.RectangleWithTag;

public class CandidateSearcher2 extends CandidateSearcher{

	public CandidateSearcher2() {
		super();
	}
	
	@Override
	List<RectangleWithTag> reduceRectangles(ArrayList<RectangleWithTag> originalRectangles) {
		// pre originalRectangles != null && originalRectangles.size()>0
		if (originalRectangles == null || originalRectangles.size() == 0) throw new IllegalArgumentException("No original rectangles provided");
		LinkedList<RectangleWithTag> combinedRectangles = new LinkedList<RectangleWithTag>();
		//boolean combinationOccured = false;
		for (int i = 0; i< originalRectangles.size(); i++) {
			RectangleWithTag rectangleWithTagI = originalRectangles.get(i);
			boolean combinationOccured = false;
			Iterator<RectangleWithTag> combinedRectanglesIterator = combinedRectangles.iterator();
			while(combinedRectanglesIterator.hasNext()) {
				RectangleWithTag combinedRectangleWithTag = combinedRectanglesIterator.next();
				Rectangle overlappingRectangle = rectangleWithTagI.overlap(combinedRectangleWithTag); // find overlap
				
				if (overlappingRectangle != null) { // determine new rectangle
					combinationOccured = true;
					
					HashSet<Integer> tagsOfOverlap= new HashSet<Integer>();
					Iterator<Integer> tagsI = rectangleWithTagI.getTagIterator();
					Iterator<Integer> tagsJ = combinedRectangleWithTag.getTagIterator();	
					while(tagsI.hasNext()) {
						tagsOfOverlap.add(tagsI.next());
					}
					while(tagsJ.hasNext()) {
						tagsOfOverlap.add(tagsJ.next());
					}
					
					RectangleWithTag overlappingRectangleWithTag = new RectangleWithTag(overlappingRectangle, tagsOfOverlap);
					
				}
				
			}
		}

		
		
		return originalRectangles;
		
	}

}
