package fernuni.propra.user_interface;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.JPanel;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;
import fernuni.propra.internal_data_model.LineSegment;
import fernuni.propra.internal_data_model.Point;
import fernuni.propra.internal_data_model.Wall;

/**
 * A concrete {@link RoomPanelAbstract} that can display
 * an {@link IRoom} in a 1024x768 window. 
 * <p>
 * @author alex
 *
 */
public class RoomPanel extends RoomPanelAbstract{ 
	private static final int PIXEL_LAMP_DIAMETER = 10; // in pixels
	private List<PlotRectangle> rectangles = 
			new ArrayList<PlotRectangle>(); // the rectangles to be
											// displayed
	
	public RoomPanel(IRoom room) {
		super(room);
	}
	
	@Override
	protected void drawLamps(Graphics2D g2D) {
		double scale = getScale();
		IRoom room = getRoom();
		
		double pixelOffsetX = getPixelOffsetX();
		double pixelOffsetY = getPixelOffsetY();

		Iterator<Lamp> lampIterator = room.getLamps();
		while(lampIterator.hasNext()) {
			Lamp lamp = lampIterator.next();
			Color lampColor = lamp.getOn() ? Color.YELLOW :  Color.DARK_GRAY;
			g2D.setColor(lampColor);
			g2D.fillOval( (int) (pixelOffsetX + lamp.getX() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), 
					(int) (pixelOffsetY + lamp.getY() * scale) - (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), PIXEL_LAMP_DIAMETER, PIXEL_LAMP_DIAMETER);
			g2D.setStroke(new BasicStroke(2));
			g2D.setColor(Color.BLACK);
			g2D.drawOval((int) (pixelOffsetX + lamp.getX() * scale)
					- (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), 
					(int) (pixelOffsetY+lamp.getY() * scale) 
					- (int) Math.round(PIXEL_LAMP_DIAMETER/2.0), 
					PIXEL_LAMP_DIAMETER, PIXEL_LAMP_DIAMETER);
		}
		
	}

	@Override
	protected void drawRoom(Graphics2D g2D) {
		double scale = getScale();
		IRoom room = getRoom();
		
		double pixelOffsetX = getPixelOffsetX();
		double pixelOffsetY = getPixelOffsetY();
		
		g2D.setStroke(new BasicStroke(2));
		Polygon p = new Polygon();
		
		
		
		Iterator<Point> cornerIterator = room.getCorners();
		while(cornerIterator.hasNext()) {
			Point corner = cornerIterator.next();
			p.addPoint((int) (pixelOffsetX  +corner.getX() * scale), 
					(int) (pixelOffsetY + corner.getY() * scale));
		}
		
		g2D.setColor(Color.ORANGE);
		g2D.fillPolygon(p);
		
		g2D.setColor(Color.BLACK);
		Iterator<Wall> wallIterator = room.getWalls();
		while(wallIterator.hasNext()) {
			LineSegment wall = wallIterator.next();
			g2D.drawLine((int) (pixelOffsetX + wall.getP1().getX() * scale),
					(int) (pixelOffsetY + wall.getP1().getY() * scale),
					(int) (pixelOffsetX + wall.getP2().getX() * scale), 
					(int) (pixelOffsetY + wall.getP2().getY() * scale));
		}
			
	}

	@Override
	protected void drawRectangles(Graphics2D g2D) { 
		double scale = getScale();
		double pixelOffsetX = getPixelOffsetX();
		double pixelOffsetY = getPixelOffsetY();
		
		g2D.setStroke(new BasicStroke(2));
		for (PlotRectangle rectangle: rectangles) {
			g2D.setColor(rectangle.color);
			g2D.drawRect((int) (pixelOffsetX + rectangle.x * scale), 
					(int) (pixelOffsetY + rectangle.y * scale), 
					(int) (rectangle.width * scale), (int) (rectangle.height * scale));
			g2D.drawString(rectangle.name, 
					(int) ((pixelOffsetX + rectangle.x + rectangle.width/2) * scale), 
					(int) ((pixelOffsetY + rectangle.y + rectangle.height/2) * scale) );
		}
	}

	
	
	
}
