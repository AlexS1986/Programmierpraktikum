package File_Processing_Component;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import fernuni.propra.internal_data_model.LineSegment;
import fernuni.propra.internal_data_model.Point;

@RunWith(Parameterized.class)
public class LineSegmentTestParameterized {
	
	@Parameter(0)
	public LineSegment lp1;
	@Parameter(1)
	public boolean result1;
	
	
    // creates the test data
    @Parameters
    public static Collection<Object[]> data() {
        Object[][] data = new Object[][] { { new LineSegment(new Point(0,0), new Point(1,0)), true }, 
        	{ new LineSegment(new Point(1,0), new Point(1,1)), false }, { new LineSegment(new Point(1,1), new Point(0,1)), true } };
        return Arrays.asList(data);
    }



	@Test
	public void testLineSegment() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetP1() {
		//Arrange 
		Point p1 = new Point (0,0);
		Point p2 = new Point (0,1);
		LineSegment linesegment = new LineSegment(p1, p2);
		
		//Act
		Point px = linesegment.getP1();
		
		//Assert
		assertSame(p1, px);
		
	}

	@Test
	public void testGetP2() {
		//Arrange 
		Point p1 = new Point (0,0);
		Point p2 = new Point (0,1);
		LineSegment linesegment = new LineSegment(p1, p2);
		
		//Act
		Point px = linesegment.getP2();
		
		//Assert
		assertSame(p2, px);
	}

	@Test
	public void testIsHorizontal() {
		//Arrange 
		Point p1 = new Point (0,0);
		Point p2 = new Point (0,1);
		LineSegment linesegment = new LineSegment(p1, p2);
		
		//Act
		boolean isHorizontal = linesegment.isHorizontal();
		
		//Assert
		assertTrue(isHorizontal);
	}
	
	@Test
	public void testIsHorizontalParametrized() {
		//Act
		boolean isHorizontal = lp1.isHorizontal();
		
		//Assert
		assertTrue(isHorizontal);
	}
	

	@Test
	public void testIsVertical() {
		//Arrange 
		Point p1 = new Point (0,0);
		Point p2 = new Point (0,1);
		LineSegment linesegment = new LineSegment(p1, p2);
		
		//Act
		boolean isVertical = linesegment.isVertical();
		
		//Assert
		assertTrue(!isVertical);
	}

	@Test
	public void testOverlapsXrange() {
		fail("Not yet implemented");
	}

	@Test
	public void testOverlapsYrange() {
		fail("Not yet implemented");
	}

	@Test
	public void testPerpendicularPointPoint() {
		fail("Not yet implemented");
	}

	@Test
	public void testPerpendicularLineSegment() {
		fail("Not yet implemented");
	}

	@Test
	public void testLineSegmentDoesNotIntersectLineSegments() {
		fail("Not yet implemented");
	}

	@Test
	public void testIntersectionWithLinesegment() {
		fail("Not yet implemented");
	}

}
