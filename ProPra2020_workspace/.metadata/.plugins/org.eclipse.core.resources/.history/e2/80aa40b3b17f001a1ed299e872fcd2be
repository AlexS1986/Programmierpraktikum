package fernuni.propra.internal_data_model;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.jdom2.Element;

public class Room implements IRoom {
	private List<Lamp> lamps;
	private final LinkedList<Point> corners;
	private final boolean counterClockWise;
	private double minX, maxX, minY, maxY;
	private List<LineSegment> walls = new LinkedList<LineSegment>();
	private String ID;
	
	public double getMinX() {
		return minX;
	}

	public double getMaxX() {
		return maxX;
	}

	public double getMinY() {
		return minY;
	}

	public double getMaxY() {
		return maxY;
	}

	public Room(String ID, List<Lamp> lamps, LinkedList<Point> corners, boolean counterClockWise) {
		this.lamps = lamps;
		this.corners = corners;
		this.counterClockWise = counterClockWise;
		computeDimension();
		this.ID = ID;
	}

	@Override
	public Iterator<Lamp> getLamps() {
		return lamps.iterator();
	}

	@Override
	public Iterator<Point> getCorners() {
		if (counterClockWise) {
			return corners.iterator();
		} else {
			return corners.descendingIterator();
		}	
	}

	@Override
	public void addLamp(Lamp lamp) {
		lamps.add(lamp);

	}

	@Override
	public int getNumberOfLamps() {
		return lamps.size();
	}

	private void computeDimension() {
		if (corners.isEmpty()) {
			throw new IllegalArgumentException("Room does not have any corners!");
		} else {
			minX = corners.get(0).getX(); maxX = minX;
			minY = corners.get(0).getY(); maxY = minY;
		}
		
		for (Point corner :  corners ) {
			if (corner.getX()< minX) {
				minX = corner.getX();
			} else if(corner.getX()>maxX) {
				maxX = corner.getX();
			}
			if (corner.getY()< minY) {
				minY = corner.getY();
			} else if(corner.getY()>maxY) {
				maxY = corner.getY();
			}
			
		}
	}

	@Override
	public Iterator<LineSegment> getWalls() {
		if (walls.isEmpty()) {
			computeWalls();
		}
		
		// TODO Auto-generated method stub
		return walls.iterator();
	}

	private void computeWalls() {
		Point firstCorner = null;
		Point previousCorner = null;
		
		Iterator<Point> cornersIterator = getCorners();
		
		
		for (Point corner : corners) {
			if (firstCorner == null) {
				firstCorner = corner;
			} else {
				LineSegment newWall = new LineSegment(previousCorner, corner);
				walls.add(newWall);
			}
			previousCorner = corner;
		}
		LineSegment newWall = new LineSegment(previousCorner, firstCorner);	
		walls.add(newWall);
	}

	@Override
	public String getID() {
		return this.ID;
	}
	
	
	boolean isCounterClockWise(Point bottomMostRightMostPoint) {
		// https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order/1180256#1180256
		int indexOfBMRMP = corners.indexOf(bottomMostRightMostPoint);
		Point previous;
		Point next;
		if (indexOfBMRMP == 0) {
			previous = corners.get(corners.size()-1);
			next = corners.get(indexOfBMRMP+1);
		} else if(indexOfBMRMP == (corners.size()-1)) {
			previous = corners.get(indexOfBMRMP-1);
			next = corners.get(0);
		} else {
			previous = corners.get(indexOfBMRMP-1);
			next = corners.get(indexOfBMRMP+1);
		}
		
		double dx1 = bottomMostRightMostPoint.getX()-previous.getX();
		double dx2 = next.getX() - bottomMostRightMostPoint.getX();
		
		double dy1 = bottomMostRightMostPoint.getY()-previous.getY();
		double dy2 = next.getY() - bottomMostRightMostPoint.getY();
		
		double crossProduct = dx1*dy2 - dx2*dy1;
		return crossProduct > 0;
	}
	
	Point getMostBottomMostRightPoint() {
		
		Point mostBottomMostRightPoint = null;
		for (Point corner: corners) {
			if(mostBottomMostRightPoint != null) {
				if( corner.getY() <= mostBottomMostRightPoint.getY()) {
					
				}
			} else {
				mostBottomMostRightPoint = corner;
			}
		}
		
		for(Element cornerNode : cornerNodes) {
			Point tmpPoint = new Point(Double.parseDouble(cornerNode.getChildText("x")), Double.parseDouble(cornerNode.getChildText("y")));
			// add wall
			if (!corners.isEmpty()) {
				LineSegment newWall = new Wall(corners.getLast(), tmpPoint);
				testAndAddWallToWalls(newWall, walls);
			}
			
			// add corner
			corners.add(tmpPoint);
			if (bottomMostRightMostPoint != null ) {
				if (tmpPoint.getY()<= bottomMostRightMostPoint.getY()) {
					if (tmpPoint.getX()>bottomMostRightMostPoint.getX()) {
						bottomMostRightMostPoint = tmpPoint;
					}
				}
			} else {
				bottomMostRightMostPoint = tmpPoint;
			}
		}
	}
	
	
}
