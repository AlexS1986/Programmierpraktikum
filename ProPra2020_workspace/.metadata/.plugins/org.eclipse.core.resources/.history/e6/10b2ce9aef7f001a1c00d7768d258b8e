package fernuni.propra.algorithm;

import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.internal_data_model.Wall;

public abstract class WallContainerAbstract {
	
	List<Wall> walls;
	
	public WallContainerAbstract() {
		walls = new LinkedList<Wall>();
		
		
	}
	
	public void add(Wall wall) throws WallContainerException{
		if (!wall.isNorthWall()) throw new WallContainerException("Wall is not a north wall!");
		walls.add(wall);
		walls.sort(new Comparator<Wall>() { // TODO: dont sort complete list -> find correct position and insert there
			@Override
			public int compare(Wall o1, Wall o2) {
				if (o1.getP1().getY() < o2.getP1().getY()) {
					return -1;
				} else if (o1.getP1().getY()>o2.getP1().getY()) {
					return 1;
				} 
				return 0;
			}
		});
	}
	
	
	public Wall getNearestWall(double low, double high, double limit) throws WallContainerException{
		if (low >= high) throw new WallContainerException();
		Iterator<Wall> iterator = walls.iterator();
		Wall nextWall;
		while(iterator.hasNext()) {
			nextWall = iterator.next();
			if (validWall(nextWall, limit, low, high)) {
				return nextWall;
			}
		}
		return null;
	}

	protected abstract boolean validWall(Wall wall, double limit, double low, double high);
	
	protected abstract Comparator<Wall> getComparator();
}
