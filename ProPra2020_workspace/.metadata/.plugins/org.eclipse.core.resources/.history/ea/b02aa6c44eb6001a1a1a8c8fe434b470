package fernuni.propra.algorithm;

import fernuni.propra.algorithm.runtime_information.IRuntimeInformation;
import fernuni.propra.algorithm.runtime_information.IRuntimeReader;
import fernuni.propra.algorithm.runtime_information.RuntimeExceptionLamps;
import fernuni.propra.algorithm.runtime_information.RuntimeInformation;
import fernuni.propra.internal_data_model.IRoom;
/**
 * Use case that provides access to the validation algorithm for an {@link IRoom} instance.
 * <p>
 * The test for illumination is delegated to an instance of {@link ValidateK} that controls the
 * execution of the algorithm and returns the result.
 * <p>
 * 
 * @author alex
 *
 */
public class UserValidateAAS {
	private ValidateK validateK  = new ValidateK();
	private String resultString; // the result to be displayed.
	IRuntimeInformation runtimeInfo = new RuntimeInformation();
	
	/**
	 * Provides the user with access to the validation algorithm
	 * @param room
	 * @return
	 * @throws UserValidateAASException
	 */
	public boolean validate(IRoom room) throws UserValidateAASException{
		try {
			runtimeInfo.startTime();
			boolean isIlluminated = validateK.validate(room, runtimeInfo);
			runtimeInfo.stopTime();
			resultString = computeResultString(room, isIlluminated);
			return isIlluminated;
		} catch (ValidateKException e) {
			throw new UserValidateAASException(e);
		} catch (RuntimeExceptionLamps e) {
			throw new UserValidateAASException(e);
		}
	}

	/**
	 * Computes a result string that can be displayed to the user.
	 * @param room : {@link IRoom} instance that has to be checked.
	 * @param isIlluminated : a boolean that represents whether the room is illuminated or not
	 * @return
	 */
	private static String computeResultString(IRoom room, Boolean isIlluminated) {
		String lineSeparator =  System.getProperty("line.separator");
		StringBuilder sb = new StringBuilder("The room ");
		sb.append(room.getID());
		String illuminatedOrNot = isIlluminated ? " is illuminated. " : " is NOT illuminated. ";
		sb.append(illuminatedOrNot);
		sb.append(lineSeparator);
		sb.append(room.printLampPositions());
		String outString = sb.toString();
		return outString;
	}
	
	public String getResultString() {
		return resultString;
	}
	
	public IRuntimeReader getRuntimeInformation() {
		return runtimeInfo;
	}
	
}
