package fernuni.propra.algorithm;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import fernuni.propra.algorithm.util.RectangleWithTag;
import fernuni.propra.internal_data_model.IRoom;
import fernuni.propra.internal_data_model.Lamp;

public class IlluminationTester implements IIlluminationTester{ // TODO utility class or singleton? eher singleton!
	private IRoom room;
	private IOriginalPartialRectanglesFinder originalPartialRectanglesFinder;
	
	private HashSet<Integer> tagsOfAllPartialRectangles = new HashSet<Integer>();
	private List<Lamp> taggedLamps;
	

	public IlluminationTester(IRoom room, IOriginalPartialRectanglesFinder originalPartialRectanglesFinder) {
		// lamps are included in room, original Rectangles are not known
		this.room = room;
		this.originalPartialRectanglesFinder = originalPartialRectanglesFinder;
	}
	
	

	@Override
	public boolean testIfRoomIsIlluminated(IRuntimeIlluminationTester runtimeInfo) {
		// TODO Auto-generated method stub
		
		HashSet<Integer> tagsOfAllIlluminatedPartialRectangles = new HashSet<Integer>();
		for (Lamp lamp : taggedLamps) {
			if (lamp.getOn()) {
				Iterator<Integer> tagIterator = lamp.iteratorTag();
				while(tagIterator.hasNext()) {
					tagsOfAllIlluminatedPartialRectangles.add(tagIterator.next());
				}
			}

		}
		if (tagsOfAllIlluminatedPartialRectangles.containsAll(tagsOfAllPartialRectangles)) {
			return true;
		} else {
			return false;
		}
	}
	
	
	public static boolean testIfRoomIsIlluminated(IRoom room, IRuntimeIlluminationTester runtimeInfo) throws OriginalPartialRectanglesFinderException {
		try {
			IOriginalPartialRectanglesFinder originalRectanglesFinder = new OriginalPartialRectanglesFinder();
			List<RectangleWithTag> rectanglesWithTag = originalRectanglesFinder.findOriginalPartialRectangles(room, runtimeInfo);	
			HashSet<Integer> allTags = originalRectanglesFinder.getAllTags();
			
			// assign lamps to tags/rectangles
			HashSet<Integer> tagsOfAllIlluminatedLamps = new HashSet<Integer>();
			
			//List<Lamp> taggedLamps = new LinkedList<Lamp>();
			Iterator<Lamp> lampIterator = room.getLamps();
			while(lampIterator.hasNext()) {
				Lamp lamp = lampIterator.next();
				if(lamp.getOn()) {
					//taggedLamps.add(lamp);
					for(RectangleWithTag rec : rectanglesWithTag) {
						if(lamp.isInsideRectangle(rec.getP1(), rec.getP3())) {
							Iterator<Integer> tagIterator = rec.getTagIterator();
							while(tagIterator.hasNext()) {
								tagsOfAllIlluminatedLamps.add(tagIterator.next());
								//lamp.addTag(tagIterator.next());
							}
						}
					}
				}	
			}
			if(tagsOfAllIlluminatedLamps.containsAll(allTags)) {
				return true;
			} else {
				return false;
			}
			
		} catch (OriginalPartialRectanglesFinderException e) {
			throw new OriginalPartialRectanglesFinderException(e);
		}
		
	}

	
	private boolean illuminatedLampsCoverAllTags(List<Lamp> taggedLamps, HashSet<Integer> allTags) {
		// TODO Auto-generated method stub
		HashSet<Integer> tagsOfAllIlluminatedLamps = new HashSet<Integer>();
		for (Lamp lamp : taggedLamps) {
			if (lamp.getOn()) {
				Iterator<Integer> tagIterator = lamp.iteratorTag();
				while(tagIterator.hasNext()) {
					tagsOfAllIlluminatedLamps.add(tagIterator.next());
				}
			}
		}
		if (tagsOfAllIlluminatedLamps.containsAll(allTags)) {
			return true;
		} else {
			return false;
		}
	}
	
	private static boolean illuminatedLampsCoverAllTags(Iterator<Lamp> taggedLampsIterator, HashSet<Integer> allTags) {
		// TODO Auto-generated method stub
		HashSet<Integer> tagsOfAllIlluminatedLamps = new HashSet<Integer>();
		while(taggedLampsIterator.hasNext()) {
			Lamp lamp = taggedLampsIterator.next();
			if (lamp.getOn()) {
				Iterator<Integer> tagIterator = lamp.iteratorTag();
				while(tagIterator.hasNext()) {
					tagsOfAllIlluminatedLamps.add(tagIterator.next());
				}
			}
		}
		if (tagsOfAllIlluminatedLamps.containsAll(allTags)) {
			return true;
		} else {
			return false;
		}	
	}
}
