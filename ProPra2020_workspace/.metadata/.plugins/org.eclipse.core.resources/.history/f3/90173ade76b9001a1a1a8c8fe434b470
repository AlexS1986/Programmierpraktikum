package fernuni.propra.algorithm.util;

import fernuni.propra.internal_data_model.Point;

/**
 * A rectangle that does provides functionality to support the algorithm.
 * <p>
 * The rectangle is specified by providing the corner {@link Point}s,
 * where in an horizontal-vertical/x-y coordinate system, the points are
 * always arranged as 
 * <p>
 * P1: bottom left
 * P2: bottom right
 * P3: top right
 * P4: top left
 * <p>
 * The functions {@link equals} and {@link hashcode} are overwritten so that 
 * {@link Rectangle}s are consideres equal if their corner points are each equal. This also
 * supports usage in a {@link HashSet}.
 * <p>
 * @author alex
 *
 */
public class Rectangle {
	private Point p1,p2,p3,p4; // corner points
	
	public Rectangle(Point p1, Point p3) {
		if(!isValidRectangle(p1, p3)) {
			throw new IllegalArgumentException("Rectangle not initialized correctly");
		}
		this.p1 = p1;
		this.p2 = new Point(p3.getX(),p1.getY());
		this.p3 = p3;
		this.p4 = new Point(p1.getX(), p3.getY());
	}
	
	/** 
	 * @return bottom left {@link Point}
	 */
	public Point getP1() {
		return new Point(p1.getX(), p1.getY());
	}
	
	/** 
	 * @return bottom right {@link Point}
	 */
	public Point getP2() {
		return new Point(p2.getX(), p2.getY());
	}
	
	/** 
	 * @return top right {@link Point}
	 */
	public Point getP3() {
		return new Point(p3.getX(), p3.getY());
	}
	
	/** 
	 * @return top left {@link Point}
	 */
	public Point getP4() {
		return new Point(p4.getX(), p4.getY());
	}
	
	/**
	 * Computes the overlap of two {@link Rectangle} which is also a {@link Rectangle}.
	 * The overlap is determined by finding the coordinates of P1, i.e. (x1, y1), and
	 * P3, i.e. (x3,y3) as
	 * <p>
	 * x1 = max(this.p1.x, other p1.x),
	 * y1 = max(this.p1.y, other p1.y),
	 * x3 = min(this.p3.x, other p3.y),
	 * y3 = min(this.p3.y, pther p3.y)
	 * <p>
	 * The resulting rectangle which is defined by P1, P3 is then checked for orientation
	 * and for validity.
	 * <p>
	 * If the resulting rectangle is valid it is returned. If not then no overlap exists
	 * and null is returned.
	 * <p>
	 * 
	 * @param other : a {@link Rectangle} that is compared with the calling {@link Rectangle}
	 * @return The {@link Rectangle} that represents the overlap between the calling {@link Rectangle} and the parameter
	 * 		  other. If the rectangles don't overlap, then null is returned.
	 */
	public Rectangle overlap(Rectangle other) {
		Point p1 = new Point(Math.max(this.p1.getX(), other.p1.getX()), 
				Math.max(this.p1.getY(), other.p1.getY()));
		Point p3 = new Point(Math.min(this.p3.getX(), other.p3.getX()), 
				Math.min(this.p3.getY(), other.p3.getY()));
		if(isValidRectangle(p1, p3)) {
			Rectangle outRectangle = new Rectangle(p1, p3);
			if(outRectangle.isCounterClockWise()) {
				return outRectangle;
			} else {
				return null;
			}
		} else {
			return null;
		}
		
	}
	
	/**
	 * 
	 * @return the center {@link Point} of the {@link Rectangle}.
	 */
	public Point getCenter() {
		double width = p2.getX() - p1.getX();
		double height = p3.getY() - p1.getY();
		return new Point(p1.getX()+width/2.0, p1.getY()+height/2.0);
	}
	
	/**
	 * Checks if {@link Point}s have counter clock wise orientation 
	 * by evaluating of the cross product P2P3 x P2P1 
	 * <p>
	 * @return A boolean that shows whether the {@link Rectangle} as counter clock wise orientation.
	 */
	boolean isCounterClockWise() {
		double dx1 = 0.0;
		double dx2 = p1.getX()-p2.getX();
		double dy1 = p3.getY() - p2.getY();
		double dy2 = 0.0;
		
		return dx1 * dy2 - dx2 * dy1 > 0;
	}
	
	@Override
	public boolean equals(Object o) {
		if (o == this) return true;
		if(!(o instanceof Rectangle)) {
			return false;
		}
		Rectangle r = (Rectangle) o;
		return getP1().equals(r.getP1()) && getP2().equals(r.getP2()) 
				&& getP3().isEqual(r.getP3()) && getP4().equals(r.getP4()) ;
	}
	
	@Override
	public int hashCode() {
		int result = 17;
		result = 31 * result + p1.hashCode();
		result = 31 * result + p3.hashCode();
		return result;
	}
	
	/**
	 * Checks whether the {@link Rectangle} is a valid {@link Rectangle} in the sense
	 * that P1 might be the bottom left point and P3 the top right point.
	 * @param p1 : P1 of the rectangle
	 * @param p3 : P3 of the rectangle
	 * @return A boolean that shows whether the {@link Rectangle} is a valid rectangle with nonzero volume
	 */
	private static boolean isValidRectangle(Point p1, Point p3) {
		boolean isValidRectangle = p1.getX()< p3.getX() && p3.getY()> p1.getY();
		return isValidRectangle;
	}
	
}
